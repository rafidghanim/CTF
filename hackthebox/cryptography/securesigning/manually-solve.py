from hashlib import sha256
import string


def H(m):
    return sha256(m).hexdigest()
"""
Th3 h4sh
2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881
8cf2283ad6ef0a3266059b418a73f8479338233ea2c4bcd3c1f51c39f13ae7dc
0c6947fda12f6b9a18b81f7c46cdbe0130e2d329d1708487a49f867fc2c1c47e
8269e5f075a584189788e339df5dc20e290664d416bba9d12aa88afc9f1ecbde
a0a5ee1a4375440c70f0310a579bc607582630ed923ed5bd6b7970c63757b19f
4ec2b74b8c2a1761f3d3b68ab4fee602dc24fef3e9968811c7ed107f822c4034
d0ba407b78c7793b5ffab157ba3d706a8c5910b78aa6853e7dd0a833b6035833
2b2054eef74611775ca7a4388df5394ee1fcddcf9fef388b59eeb918b69f9cf2
f333b9af73d19e8563c22200e1202cbb1de7ce92d1af285191e61c25d930c3ff
7da98b7fa0f6867f2c3a96afe0604fd17e7cb90f1944ec5c7f6e67221ed99672
243574e015fcefe8a602bc6fb48840440ad99eeb5fb71e59f76e19c6f0951fdb
453ccf0ba0218d1b6dbea1c9e180323d583d2f628605373caecdf83ad18807fb
bbc91310d4c98739adc16cf2285736ad463ffa050286b993980c5d28ea841dab
7618eb70e46ac38aa4195b17760055eb476e33540541db21df23ac9689e1bd9b
a9e3a9d014e512b6303dbfc91a6dc7f26f438664612c567396501a3432b954f2
b2654ef9ba91740e4f1a81dfee4f1b986c1a37afba1e3ce93dc696c51fdf8bf7
c2748a95b40d20f9ff07cf7be816b183b52062282b0816025599139110defb03
33ea6b26125bb7c3401f1221aba9a94936b104a763046ebc375c97d9a38f25c1
dd4196c752c8e25fbfb71ed32e2136b765f367a767c2c403cad68df76d64a26d
3fe67ab80a312cb60098ba43d042034f8d435a66f82bb94082a0578400981ddc
362ae571e327f0ce55ecac1226caaebe5b49c250b8eca108eab075c8ffc8fd78
2c62eed895b1b472a94dd701dc924640882238690e5df5a5aef0b15160044c8a
afa7eeaad1e177d2ee196ea3a2faf2f0e1a20cf821733ed07b896fbfa388e892
8dd5218f34649a6865e59b3f2d4ed43e4435dfb0d6553271fd2503e06414993a
993cbfaef645d62a5e57bd55bc778eaf33042a4e83acc2e630b58659d340cce9
9354bb22b7a9f23e16b80df5af4c4ea319ec96e42822b5c80d869e53b0e1d55f
6837ce05f4b9ad60ecdf781ad910ba1af779fcdfa1fc715b933f2df76e3068ad
2ecfcc2f27e7f3366c54ff2db63e89ecd95ac25a80296da70554413f24665827
e88f8dbf2418f65f7654a269cf2e00e7a59f584d2894b75c1919683fe1c5cdf5
49519e3123233a267a8bb2899112715b957d60f17459567c64461cc2e7251af7
32cb8f981afaa6b4d7e7b205ccab761773595ced160848201d72e0f11e1ab618
e8f6ff53ed4fce1f62edb2d0dfdf8a336836f0b95f5a1d92bb2fb39a9ea312b3
0a77faa9953a8f9f80c334025842b7c61335a7a93a4f4716cdaa1a2b8fa9deba
b9c3aa8ae29a175650fd0287813d913246df23b8df4e8bf5f25205297c622eef
cfe8e588392d665aa31a1862dcbf56d09736665f34ec781440431f094d1774bb
dd08846949e98eed95f37c638024c4c323fb173d1436faecc61f9a7aa7051d9d
3ce3b9f5e5d8a5c0486cf65cc66cf4c6223cb9ae261748b7e3c473de05e61b05
6599e0234ea828c6cb27e41e18dfabbb961e3cbec70886f963eed3c0690ae71f
e4ec1c1b00e77651073d9ee4dae9a39905b832c9bd9bb78bad24ab77edf65186
b6a800a0c8215b8f7520d13b85d703392db599714a427207473a9a932cc2ffba
36bd4c74ae1ede1fbe175beef565147a515cf07e30e1b5ea9b98d2fbf1abf515
03df5f3ba1c37bae58f5081c1daea74d8f6ad7570fdd97b95c7815e92f6c2ea2
a8f9554dffd2d6a707bab02580553fb31bd406c6c8ba439bca344e0f503db185
b9657e03c1de0ad905c2eb2bda89c30045e7f7cec10a19671ba5b0d77d8cf84a
c03502d7682981d9c1f37376b38351bcbe3233b65c69a62c70d0c991762d96c9
dbfc70fc02473974ecdaac1a5e66c24eadd2dc693c5d92e0f2c5bde7064c436d
a4226552ac97cb11c2c473fd39d772d463f2ec353dfc860f0970895c63ad5abc
8ac6fdd33b9d9059ed09ea581fdc19990527bfea3a902a31dc5f2e042f74d44a
90c177cbaf9cb05b9ae7352c1b517cfba39e9cba90f32c71f4dcf87d79e3bff1
05388420df9db9583477dd63d14c2375165a765e0aeb6eceb328534d1c5e66f1
91d263eed5a8f2d1e1155dfd26d414f4f826e54f22961e1a361e1dd88a5fe5bc
06e9890a8595ab5dfe6de53996e4a8c4513f355e60fe278a8b65b1267f39260c
7ea26611e82d68364dfa9d808447ee57a5d180d09cfc6b9e7f0d7fb31ee52e05
84d2d58cc101ea8a410fcf7359eb1a14d91de0bd0f13349258cf92baf693db0e
588a9c925d5b2554b3360cf80647a9c8bf126c011d6c3b966803376e3f4ece56
19867d443cff410a295e9fa7016f2c3bbee9d767564e3d916f52ba896ccf9431
fc2646fe33625a7a0fa3c0f2eefdbbf13ddbe1f5a618de510e20e04ee65ef8c1
355d492f87fca5bbc93046b363ee8e653052a00c2f51fe345927a3c9cd6fb995
"""

hsh = ""
alp = string.printable

# Start with the known prefix
candidate_prefix = ""

for i in alp:
    # Construct the candidate string by appending the next character from alp
    candidate = candidate_prefix + i
    # Convert the string to bytes and XOR with b'0'
    xor_result = ''.join(chr(ord(x) ^ 0x30) for x in candidate)
    # Compute the hash and compare
    if H(xor_result.encode()) == hsh:
        print("Found:", candidate)
        break
