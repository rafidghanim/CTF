import math, base64
ledger = [
0x4D8F3A691D646EB3,0x4D8F3AA71D646C74,0x4D8F3AA61D646C32,
0x4D8F3BDB1D646A10,0x4D8F3B971D646DA4,0x4D8F3A0A1D646C00,
0x4D8F3A731D646E90,0x4D8F3A751D646F7D,0x4D8F3B981D646CA8,
0x4D8F3B391D646D60,0x4D8F3A3F1D6469BD,0x4D8F3A8E1D646DBA,
0x4D8F3B311D646C3C,0x4D8F3AF41D646E60,0x4D8F3B8D1D646AD8,
0x4D8F3A231D646D4C,0x4D8F3A9E1D646C48,0x4D8F3B391D646A4C,
0x4D8F3AC41D646DE5,0x4D8F38001D646CC4,0x4D8F3A7C1D646DA6,
0x4D8F3AE61D646B7A,0x4D8F3B751D646E6D,0x4D8F3B5D1D646DA4,
0x4D8F3B4D1D646D0B,0x4D8F3A691D646C50,0x4D8F3AF11D646E72,
0x4D8F3A2A1D646E08,0x4D8F3BD11D646B20,0x4D8F3B421D646CE6,
0x4D8F3A341D646D70,0x4D8F3AA51D646B76,0x4D8F3A3F1D646D97,
0x4D8F3B7A1D646EF8,0x4D8F381A1D646C34,0x4D8F3A601D646D10,
0x4D8F3AC31D646BDC,0x4D8F3AA11D646E68,0x4D8F3BB61D646BD8,
0x4D8F3B031D646CC4,0x4D8F3A591D646EDB,0x4D8F3AB01D646CA8,
0x4D8F3AD21D646E56
]
key = [0x52, 0x0F, 0x33, 0x08, 0x19, 0x27, 0x44]
MAGIC = 0xCCCCCCCCCCCCCCCD

def to_signed32(x):
    x &= 0xFFFFFFFF
    return x - (1<<32) if x & 0x80000000 else x

def compute_s2():
    s2 = []
    for i in range(43):
        part = (MAGIC * i) >> 64
        v5 = (i // 5) + (part & 0xFFFFFFFFFFFFFFFC)
        v6 = float(int(i) - int(v5) + 1)
        tmp = ledger[i] ^ 0x4D8F3A51E29B907C
        upper = (tmp >> 32) & 0xFFFFFFFF
        upper_signed = to_signed32(upper)
        v7 = -upper_signed
        v8 = float(v7)
        low = (ledger[i] & 0xFFFFFFFF) ^ 0xE29B907C
        low_signed = to_signed32(low)
        discriminant = v8 * v8 - v6 * 4.0 * float(low_signed)
        if discriminant < 0.0:
            val = (math.sqrt(abs(discriminant)) - float(v7)) / (v6 + v6)
        else:
            val = (math.sqrt(discriminant) - v8) / (v6 + v6)
            if val < 0.0:
                val = -val
        b = int(val + 0.5) & 0xFF
        s2.append(b)
    return bytes(s2)

def main():
    s2 = compute_s2()
    input_bytes = bytearray(43)
    for i in range(43):
        input_bytes[i] = s2[i] ^ key[i % 7]

    print("Computed s2 (hex):", s2.hex())
    print("Input (hex)   :", input_bytes.hex())
    try:
        print("Flag :", input_bytes.decode('ascii'))
    except Exception:
        print("Flag : (contains non-printable bytes)")

if __name__ == '__main__':
    main()
